{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benoitpaul/dev/vitamindev/react-socket-chat/client/src/ChatRoom/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ChatRoom.css\";\nimport useChat from \"../useChat\";\nimport ChatMessage from \"../ChatMessage/ChatMessage\";\nimport useTyping from \"../useTyping\";\nimport NewMessageForm from \"../NewMessageForm/NewMessageForm\";\nimport TypingMessage from \"../TypingMessage/TypingMessage\";\n\nconst ChatRoom = props => {\n  _s();\n\n  const {\n    roomId\n  } = props.match.params;\n  const {\n    messages,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage\n  } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const {\n    isTyping,\n    startTyping,\n    stopTyping\n  } = useTyping();\n\n  const handleNewMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = event => {\n    event.preventDefault();\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"room-name\",\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"messages-list\",\n        children: [messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)), typingUsers.map((user, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(TypingMessage, {\n            user: user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, messages.length + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"TESSSSSSSSST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(NewMessageForm, {\n      newMessage: newMessage,\n      handleNewMessageChange: handleNewMessageChange,\n      handleStartTyping: startTyping,\n      handleStopTyping: stopTyping,\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"GuB49RC/QwFSwjx+VMgLlN6ItaE=\", false, function () {\n  return [useChat, useTyping];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/Users/benoitpaul/dev/vitamindev/react-socket-chat/client/src/ChatRoom/ChatRoom.js"],"names":["React","useState","useChat","ChatMessage","useTyping","NewMessageForm","TypingMessage","ChatRoom","props","roomId","match","params","messages","typingUsers","sendMessage","startTypingMessage","stopTypingMessage","newMessage","setNewMessage","isTyping","startTyping","stopTyping","handleNewMessageChange","event","target","value","handleSendMessage","preventDefault","map","message","i","user","length"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,gBAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAK,CAACE,KAAN,CAAYC,MAA/B;AACA,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,kBAJI;AAKJC,IAAAA;AALI,MAMFd,OAAO,CAACO,MAAD,CANX;AAOA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM;AAAEkB,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA;AAAzB,MAAwCjB,SAAS,EAAvD;;AAEA,QAAMkB,sBAAsB,GAAIC,KAAD,IAAW;AACxCL,IAAAA,aAAa,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAIH,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACI,cAAN;AACAb,IAAAA,WAAW,CAACG,UAAD,CAAX;AACAC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA,2BAAiCT,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA,mBACGG,QAAQ,CAACgB,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,kBACZ;AAAA,iCACE,QAAC,WAAD;AAAa,YAAA,OAAO,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF,WAASC,CAAT;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,EAMGjB,WAAW,CAACe,GAAZ,CAAgB,CAACG,IAAD,EAAOD,CAAP,kBACf;AAAA,iCACE,QAAC,aAAD;AAAe,YAAA,IAAI,EAAEC;AAArB;AAAA;AAAA;AAAA;AAAA;AADF,WAASnB,QAAQ,CAACoB,MAAT,GAAkBF,CAA3B;AAAA;AAAA;AAAA;AAAA,gBADD,CANH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,EAgBGX,QAAQ,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBf,eAiBE,QAAC,cAAD;AACE,MAAA,UAAU,EAAEF,UADd;AAEE,MAAA,sBAAsB,EAAEK,sBAF1B;AAGE,MAAA,iBAAiB,EAAEF,WAHrB;AAIE,MAAA,gBAAgB,EAAEC,UAJpB;AAKE,MAAA,iBAAiB,EAAEK;AALrB;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAlDD;;GAAMnB,Q;UAQAL,O,EAG0CE,S;;;KAX1CG,Q;AAoDN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./ChatRoom.css\";\nimport useChat from \"../useChat\";\nimport ChatMessage from \"../ChatMessage/ChatMessage\";\nimport useTyping from \"../useTyping\";\nimport NewMessageForm from \"../NewMessageForm/NewMessageForm\";\nimport TypingMessage from \"../TypingMessage/TypingMessage\";\n\nconst ChatRoom = (props) => {\n  const { roomId } = props.match.params;\n  const {\n    messages,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n  } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const { isTyping, startTyping, stopTyping } = useTyping();\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = (event) => {\n    event.preventDefault();\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"chat-room-container\">\n      <h1 className=\"room-name\">Room: {roomId}</h1>\n      <div className=\"messages-container\">\n        <ol className=\"messages-list\">\n          {messages.map((message, i) => (\n            <li key={i}>\n              <ChatMessage message={message}></ChatMessage>\n            </li>\n          ))}\n          {typingUsers.map((user, i) => (\n            <li key={messages.length + i}>\n              <TypingMessage user={user}></TypingMessage>\n            </li>\n          ))}\n        </ol>\n      </div>\n      {isTyping && <div>TESSSSSSSSST</div>}\n      <NewMessageForm\n        newMessage={newMessage}\n        handleNewMessageChange={handleNewMessageChange}\n        handleStartTyping={startTyping}\n        handleStopTyping={stopTyping}\n        handleSendMessage={handleSendMessage}\n      ></NewMessageForm>\n    </div>\n  );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}