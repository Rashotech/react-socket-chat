{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = roomId => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n  useEffect(() => {\n    const fetchUser = async () => {\n      const response = await axios.get(\"https://api.randomuser.me/\");\n      const result = response.data.results[0];\n      console.log(\"user\", result);\n      setUser({\n        name: result.name.first,\n        picture: result.picture.thumbnail\n      });\n    };\n\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      };\n      console.log(incomingMessage);\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      user: user\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\n_s(useChat, \"ZEcknzkcGzWMCIEsSIfeQBL68b0=\");\n\nexport default useChat;","map":{"version":3,"sources":["/Users/benoitpaul/dev/vitamindev/react-socket-chat/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","axios","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","user","setUser","socketRef","fetchUser","response","get","result","data","results","console","log","name","first","picture","thumbnail","current","query","on","id","message","incomingMessage","ownedByCurrentUser","senderId","disconnect","sendMessage","messageBody","emit","body"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAAA;;AAC1B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,EAAhC;AACA,QAAMW,SAAS,GAAGZ,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,SAAS,GAAG,YAAY;AAC5B,YAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,4BAAV,CAAvB;AACA,YAAMC,MAAM,GAAGF,QAAQ,CAACG,IAAT,CAAcC,OAAd,CAAsB,CAAtB,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,MAApB;AACAL,MAAAA,OAAO,CAAC;AACNU,QAAAA,IAAI,EAAEL,MAAM,CAACK,IAAP,CAAYC,KADZ;AAENC,QAAAA,OAAO,EAAEP,MAAM,CAACO,OAAP,CAAeC;AAFlB,OAAD,CAAP;AAID,KARD;;AAUAX,IAAAA,SAAS;AACV,GAZQ,EAYN,EAZM,CAAT;AAcAd,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,SAAS,CAACa,OAAV,GAAoBvB,cAAc,CAACG,iBAAD,EAAoB;AACpDqB,MAAAA,KAAK,EAAE;AAAEnB,QAAAA;AAAF;AAD6C,KAApB,CAAlC;AAIAK,IAAAA,SAAS,CAACa,OAAV,CAAkBE,EAAlB,CAAqB,SAArB,EAAgC,MAAM;AACpCR,MAAAA,OAAO,CAACC,GAAR,CAAYR,SAAS,CAACa,OAAV,CAAkBG,EAA9B;AACD,KAFD;AAIAhB,IAAAA,SAAS,CAACa,OAAV,CAAkBE,EAAlB,CAAqBvB,sBAArB,EAA8CyB,OAAD,IAAa;AACxD,YAAMC,eAAe,GAAG,EACtB,GAAGD,OADmB;AAEtBE,QAAAA,kBAAkB,EAAEF,OAAO,CAACG,QAAR,KAAqBpB,SAAS,CAACa,OAAV,CAAkBG;AAFrC,OAAxB;AAIAT,MAAAA,OAAO,CAACC,GAAR,CAAYU,eAAZ;AACArB,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcsB,eAAd,CAAf,CAAX;AACD,KAPD;AASA,WAAO,MAAM;AACXlB,MAAAA,SAAS,CAACa,OAAV,CAAkBQ,UAAlB;AACD,KAFD;AAGD,GArBQ,EAqBN,CAAC1B,MAAD,EAASG,IAAT,CArBM,CAAT;;AAuBA,QAAMwB,WAAW,GAAIC,WAAD,IAAiB;AACnCvB,IAAAA,SAAS,CAACa,OAAV,CAAkBW,IAAlB,CAAuBhC,sBAAvB,EAA+C;AAC7CiC,MAAAA,IAAI,EAAEF,WADuC;AAE7CH,MAAAA,QAAQ,EAAEpB,SAAS,CAACa,OAAV,CAAkBG,EAFiB;AAG7ClB,MAAAA,IAAI,EAAEA;AAHuC,KAA/C;AAKD,GAND;;AAQA,SAAO;AAAEF,IAAAA,QAAF;AAAY0B,IAAAA;AAAZ,GAAP;AACD,CAnDD;;GAAM5B,O;;AAqDN,eAAeA,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const response = await axios.get(\"https://api.randomuser.me/\");\n      const result = response.data.results[0];\n      console.log(\"user\", result);\n      setUser({\n        name: result.name.first,\n        picture: result.picture.thumbnail,\n      });\n    };\n\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      console.log(incomingMessage);\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      user: user,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}