{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport randomuser from \"randomuser\";\nimport RandomUser from \"randomuser\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = roomId => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n  useEffect(() => {\n    const fetchUser = async () => {\n      const r = new RandomUser();\n      const user = await r.getUsers();\n      console.log(\"user\", user);\n      setUser(user);\n    };\n\n    fetchUser();\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\n_s(useChat, \"2mhFnDLihiL7AggnZ3hGog34noU=\");\n\nexport default useChat;","map":{"version":3,"sources":["/Users/benoitpaul/dev/vitamindev/react-socket-chat/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","randomuser","RandomUser","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","user","setUser","socketRef","fetchUser","r","getUsers","console","log","current","query","on","id","message","incomingMessage","ownedByCurrentUser","senderId","disconnect","sendMessage","messageBody","emit","body"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAAA;;AAC1B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC;AACA,QAAMY,SAAS,GAAGb,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,SAAS,GAAG,YAAY;AAC5B,YAAMC,CAAC,GAAG,IAAIX,UAAJ,EAAV;AACA,YAAMO,IAAI,GAAG,MAAMI,CAAC,CAACC,QAAF,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,IAApB;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KALD;;AAOAG,IAAAA,SAAS;AAETD,IAAAA,SAAS,CAACM,OAAV,GAAoBjB,cAAc,CAACI,iBAAD,EAAoB;AACpDc,MAAAA,KAAK,EAAE;AAAEZ,QAAAA;AAAF;AAD6C,KAApB,CAAlC;AAIAK,IAAAA,SAAS,CAACM,OAAV,CAAkBE,EAAlB,CAAqB,SAArB,EAAgC,MAAM;AACpCJ,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAS,CAACM,OAAV,CAAkBG,EAA9B;AACD,KAFD;AAIAT,IAAAA,SAAS,CAACM,OAAV,CAAkBE,EAAlB,CAAqBhB,sBAArB,EAA8CkB,OAAD,IAAa;AACxD,YAAMC,eAAe,GAAG,EACtB,GAAGD,OADmB;AAEtBE,QAAAA,kBAAkB,EAAEF,OAAO,CAACG,QAAR,KAAqBb,SAAS,CAACM,OAAV,CAAkBG;AAFrC,OAAxB;AAIAZ,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAce,eAAd,CAAf,CAAX;AACD,KAND;AAQA,WAAO,MAAM;AACXX,MAAAA,SAAS,CAACM,OAAV,CAAkBQ,UAAlB;AACD,KAFD;AAGD,GA7BQ,EA6BN,CAACnB,MAAD,CA7BM,CAAT;;AA+BA,QAAMoB,WAAW,GAAIC,WAAD,IAAiB;AACnChB,IAAAA,SAAS,CAACM,OAAV,CAAkBW,IAAlB,CAAuBzB,sBAAvB,EAA+C;AAC7C0B,MAAAA,IAAI,EAAEF,WADuC;AAE7CH,MAAAA,QAAQ,EAAEb,SAAS,CAACM,OAAV,CAAkBG;AAFiB,KAA/C;AAID,GALD;;AAOA,SAAO;AAAEb,IAAAA,QAAF;AAAYmB,IAAAA;AAAZ,GAAP;AACD,CA5CD;;GAAMrB,O;;AA8CN,eAAeA,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport randomuser from \"randomuser\";\nimport RandomUser from \"randomuser\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const r = new RandomUser();\n      const user = await r.getUsers();\n      console.log(\"user\", user);\n      setUser(user);\n    };\n\n    fetchUser();\n\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}