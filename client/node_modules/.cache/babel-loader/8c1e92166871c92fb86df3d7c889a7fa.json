{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = roomId => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n  useEffect(() => {\n    const fetchUser = async () => {\n      const response = await axios.get(\"https://api.randomuser.me/\");\n      const result = response.data.results[0];\n      console.log(\"user\", result);\n      setUser({\n        name: result.name.first,\n        picture: result.picture.thumbnail\n      });\n    };\n\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      };\n      console.log(incomingMessage);\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, user => {\n      setTypingUsers(users => [...users, user]);\n    });\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, user => {\n      setTypingUsers(users => users.filter(u => u.name !== user.name));\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      user: user\n    });\n  };\n\n  const startTypingMessage = () => {\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, user);\n  };\n\n  const stopTypingMessage = () => {\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, user);\n  };\n\n  return {\n    messages,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage\n  };\n};\n\n_s(useChat, \"MJghM4tjamm+gRE8AcumTtvAtdk=\");\n\nexport default useChat;","map":{"version":3,"sources":["/Users/benoitpaul/dev/vitamindev/react-socket-chat/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","axios","NEW_CHAT_MESSAGE_EVENT","START_TYPING_MESSAGE_EVENT","STOP_TYPING_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","typingUsers","setTypingUsers","user","setUser","socketRef","fetchUser","response","get","result","data","results","console","log","name","first","picture","thumbnail","current","query","on","id","message","incomingMessage","ownedByCurrentUser","senderId","users","filter","u","disconnect","sendMessage","messageBody","emit","body","startTypingMessage","stopTypingMessage"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const response = await axios.get(\"https://api.randomuser.me/\");\n      const result = response.data.results[0];\n      console.log(\"user\", result);\n      setUser({\n        name: result.name.first,\n        picture: result.picture.thumbnail,\n      });\n    };\n\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      console.log(incomingMessage);\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, (user) => {\n      setTypingUsers((users) => [...users, user]);\n    });\n\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, (user) => {\n      setTypingUsers((users) => users.filter((u) => u.name !== user.name));\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      user: user,\n    });\n  };\n\n  const startTypingMessage = () => {\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, user);\n  };\n\n  const stopTypingMessage = () => {\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, user);\n  };\n\n  return {\n    messages,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n  };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}