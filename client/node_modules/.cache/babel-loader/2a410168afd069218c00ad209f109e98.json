{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benoitpaul/dev/vitamindev/react-socket-chat/client/src/ChatRoom/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ChatRoom.css\";\nimport useChat from \"../useChat\";\nimport ChatMessage from \"../ChatMessage/ChatMessage\";\nimport useTyping from \"../useTyping\";\n\nconst ChatRoom = props => {\n  _s();\n\n  const {\n    roomId\n  } = props.match.params;\n  const {\n    messages,\n    sendMessage\n  } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const {\n    isTyping,\n    setIsTyping\n  } = useTyping();\n\n  const handleNewMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = event => {\n    event.preventDefault();\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  const handleOnKeyPress = () => {\n    setIsTyping(true);\n  };\n\n  const handleOnKeyUp = () => {\n    setIsTyping(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"room-name\",\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"messages-list\",\n        children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"TESSSSSSSSST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"new-message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: handleNewMessageChange,\n        placeholder: \"Aa\",\n        className: \"new-message-input-field\",\n        onKeyPress: handleOnKeyPress,\n        onKeyUp: handleOnKeyUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: handleSendMessage,\n        className: \"send-message-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"JeOCj3y5OXjSbQaTsYD5IwhPotM=\", false, function () {\n  return [useChat, useTyping];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/Users/benoitpaul/dev/vitamindev/react-socket-chat/client/src/ChatRoom/ChatRoom.js"],"names":["React","useState","useChat","ChatMessage","useTyping","ChatRoom","props","roomId","match","params","messages","sendMessage","newMessage","setNewMessage","isTyping","setIsTyping","handleNewMessageChange","event","target","value","handleSendMessage","preventDefault","handleOnKeyPress","handleOnKeyUp","map","message","i"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,gBAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAK,CAACE,KAAN,CAAYC,MAA/B;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BT,OAAO,CAACK,MAAD,CAAzC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM;AAAEa,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BX,SAAS,EAA3C;;AAEA,QAAMY,sBAAsB,GAAIC,KAAD,IAAW;AACxCJ,IAAAA,aAAa,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAIH,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACI,cAAN;AACAV,IAAAA,WAAW,CAACC,UAAD,CAAX;AACAC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAJD;;AAMA,QAAMS,gBAAgB,GAAG,MAAM;AAC7BP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFD;;AAIA,QAAMQ,aAAa,GAAG,MAAM;AAC1BR,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA,2BAAiCR,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA,kBACGG,QAAQ,CAACc,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,kBACZ;AAAA,iCACE,QAAC,WAAD;AAAa,YAAA,OAAO,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF,WAASC,CAAT;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,EAWGZ,QAAQ,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXf,eAYE;AAAM,MAAA,SAAS,EAAC,kBAAhB;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAEF,UAFT;AAGE,QAAA,QAAQ,EAAEI,sBAHZ;AAIE,QAAA,WAAW,EAAC,IAJd;AAKE,QAAA,SAAS,EAAC,yBALZ;AAME,QAAA,UAAU,EAAEM,gBANd;AAOE,QAAA,OAAO,EAAEC;AAPX;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAEH,iBAFX;AAGE,QAAA,SAAS,EAAC,qBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD,CA1DD;;GAAMf,Q;UAE8BH,O,EAGAE,S;;;KAL9BC,Q;AA4DN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./ChatRoom.css\";\nimport useChat from \"../useChat\";\nimport ChatMessage from \"../ChatMessage/ChatMessage\";\nimport useTyping from \"../useTyping\";\n\nconst ChatRoom = (props) => {\n  const { roomId } = props.match.params;\n  const { messages, sendMessage } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const { isTyping, setIsTyping } = useTyping();\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = (event) => {\n    event.preventDefault();\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  const handleOnKeyPress = () => {\n    setIsTyping(true);\n  };\n\n  const handleOnKeyUp = () => {\n    setIsTyping(false);\n  };\n\n  return (\n    <div className=\"chat-room-container\">\n      <h1 className=\"room-name\">Room: {roomId}</h1>\n      <div className=\"messages-container\">\n        <ol className=\"messages-list\">\n          {messages.map((message, i) => (\n            <li key={i}>\n              <ChatMessage message={message}></ChatMessage>\n            </li>\n          ))}\n        </ol>\n      </div>\n      {isTyping && <div>TESSSSSSSSST</div>}\n      <form className=\"new-message-form\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={handleNewMessageChange}\n          placeholder=\"Aa\"\n          className=\"new-message-input-field\"\n          onKeyPress={handleOnKeyPress}\n          onKeyUp={handleOnKeyUp}\n        />\n        <button\n          type=\"submit\"\n          onClick={handleSendMessage}\n          className=\"send-message-button\"\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}